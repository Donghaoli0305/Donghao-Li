use vacuum1 as knowledge.
use vacuum as actionspec.

%order=linearrandom.
exit=nogoals.


module vacuumBot {
	if bel(energyLevel(Energy), reward(Reward), probability(Probability), energyuse(Energy_use), calculateSqrtUtility(Energy, Reward, Probability, Energy_use, EU), DoNothing is sqrt(Energy), write('DoNothing is '), write(DoNothing), nl, EU > DoNothing)then {
	
	if bel(square(here,dust), energyLevel(Value), NewValue is Value + Reward) then delete( energyLevel(Value)) + insert( energyLevel(NewValue) ) + print ("Move was clean") + print("Energy is ", NewValue) + clean.
				
	if bel(square(left,dus1), energyLevel(Value), NewValue is Value - Energy_use) then delete( energyLevel(Value)) + insert( energyLevel(NewValue) ) + print ("Move was Left-Dust") + print("Energy is ", NewValue) + move(left).
	
	if bel(square(right,dust), energyLevel(Value), NewValue is Value - Energy_use) then delete( energyLevel(Value)) + insert( energyLevel(NewValue) ) + print ("Move was Right-Dust") + print("Energy is ", NewValue) + move(right).
	
	if bel(square(_,dust), energyLevel(Value), NewValue is Value - Energy_use) then delete( energyLevel(Value)) + insert( energyLevel(NewValue) ) + print ("Move was Foward") + print("Energy is ", NewValue) + move(forward).
	
	if bel(possiblemove(X), energyLevel(Value), NewValue is Value - Energy_use) then delete(energyLevel(Value)) + insert(energyLevel(NewValue)) + print("Move was randomly chosed ", X) + print("Energy is ", NewValue) + move(X).
	
	}
}
